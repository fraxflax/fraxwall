# $Id: fraxwall.rules,v 1.84 2013-10-18 08:23:14 root Exp $
#
# SYNTAX
# ------
#
# include = /path/file 
#
# includes file just as if where written here
#
#
# iptables = <string>
#
# specifys a custom iptables command, everything after '=' is passed as arguments to iptables
# Only use this parameter if you really know of what you are doing (and is named frax ;-)
#
#
# [DEFINE]
#   <keyword> = <string>
#
# everywhere <keyword> appear as a value (except for NAME, INCLUDE & IPTABLES)
# it is replaced with the text <string>.
# <string> may include separators (like ';' & ',') and other defines.
#
# OBSERVE that definitions must be defined before they are used.
# 
#
# [<out-interface>]
#   NAME = <string>
#
#   ACCEPT =	<in-interface> ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> [ ; insert|append [ ; <chain> ] ]
#   REJECT =	<in-interface> ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> [ ; insert|append [ ; <chain> ] ]
#   DROP =	<in-interface> ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> [ ; insert|append [ ; <chain> ] ]
#
#   NAT =	<snat-addr>    ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> [ ; insert ]
#
#
# Keyword "ALL" can be used for interfaces, addresses, protocols & ports. 
# OBSERVE rules with ALL as <in-interface> is always executed before specific
# interface <-> interface rules, be carefule when using REJECT and/or DROP 
# with ALL as <in-interface>!
# 
# You can also specify groups of interfaces, addresses, protocols &
# ports by specifing a comma-spearated list.
# 
# Use \<NL> for wrapping lines.  Everything after a '#' on a line is
# considered a comment. You may comment wrapped lines.
# Lines with only whitespaces are ignored.
# 
#
# NAT sets up snat or masquerading for the specified sources and
# destination.  Observe that it does NOT automatically setup netfiler
# (FORWARD) ACCEPT rules to the specified destination(s), so you can safely
# use ALL for dest-addr, protocol and dest-port, controlling the
# access with ACCEPT, REJECT and DROP instead.  
# If you specify ALL as <snat-addr> target MASQUERADE will be used
# instead of SNAT.
#
# The special interface '_FW_' means all interfaces on the firewall itself.
# When used as in-interface it will affect the OUTPUT chain, and when used
# as out-interface it will affect the INPUT chain. 
# It will NEVER affect the FORWARD chain.
#
# ORDER does matter, rules are appended (or inserted specified) in the
# order they appear. This is exactly how it works:
# The first time a <out-interface>,<in-interface> rule appears a chain for that
# interface combination is created. A rule for jumping to the that chain is
# appended, or inserted in case ALL is <in-interface>, to the
# appropiate default chain. All rules that have that exact combination of
# <out-interface>,<in-interface> will then be appended (or inserted if specified)
# to that chain. 
# If a <chain> is specified the rules are appended (inserted) to 
# <chain> instead. If it is the first time <chain> is used the chain
# named <chain> is created and jumped to according to the
# <in-interface>,<out-interface> combination in that rule.
# 
# 
# [PROXY]
#   PROXY =	<in-interface> ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> ; \
#		<proxy-addr> ; <proxy-port> [ ; insert ]
#   DIRECT =	<in-interface> ; <source-addr> ; <dest-addr> ; <protocol> ; <dest-port> [ ; append ]
# 
# The PROXY parameter setup netfilter rules allowing sources from the
# in-interface access to the proxy server, and also nat rules for
# redirecting the traffic (transparent proxy).
# 
# Observe that this allows the source-addr full access to the proxy
# server on proxy-port, alowing the source-addr to bypass netfilter
# security for the protocols the proxy server supports.
# You will also have to set up the appropiate restrictions in the 
# proxy server's config.
# 
# If proxy-addr is 127.0.0.1, localhost or ALL, REDIRECT target is
# used, otherwise DNAT ...  thus, do not specify the address of one of
# the firewalls interfaces if you have the proxy on the firewall
# itself, use localhost or ALL instead.
#
# The DIRECT parameter overrides the PROXY parameter allowing direct
# (possibly NAT:ed) access to or from certain hosts if including the
# same ports as the PROXY parameter.
# Observe that DIRECT does NOT automatically setup netfiler
# (FORWARD) ACCEPT rules to the specified destination(s). You will have to
# do this using ACCEPT parameters for the appropiate interfaces.
# 

[DEFINE]
  IBB2    =	vlan110
  #ICOMHEM =	vlan666
  #IEXTs   =	IBB2,ICOMHEM
  IEXTs   =	IBB2

  IVPNUC =	cph0
  AVPNUC =	10.45.46.97
  #IVPNUS =	sou0
  IVPNU  =	cph0 #,sou0

  IINT =	vlan16
  NINT =	10.46.254.0/25
  IWIF =	vlan116
  NWIF =	10.46.254.128/25
  IVR  =	brvr
  NVR  =	10.46.255.192/26
  ILOCs  =	IINT,IWIF,IVR
  NLOCs  =	10.46.254.0/24,10.46.255.192/26
  AFRAXU =	10.45.32.97,10.45.32.99,10.45.32.103,10.45.32.107
  IVPNAX =	wgaxnet
  NVPNAX =	10.46.255.0/28 # 0-15
  IVPNNS =	wgns
  NVPNNS =	10.46.255.16/28 # 16-31
  IVPNAXNS =	IVPNAX,IVPNNS
  NVPNAXNS =	10.46.255.0/27 # 0-31
  IVPN =	IVPNAX,IVPNNS,IVPNU

  AUNITYE =	80.80.14.220,80.80.14.217
  AUNITYT =	169.254.9.237

  IDMZMC =	brdmzmc
  NDMZMC =	10.46.255.252/30
  AMC =		10.46.255.254
  IDWL =	vlan255
  #IDWL =	enx00249b1689e3
  NDWL =	10.46.255.248/30

  IDMZs =	IDMZMC
  NDMZs =	NDMZMC

  # Networks / Addresses
  NLOOP =	127.0.0.0/8
  NPRIV =	10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
  NUTUN =	169.254.9.76/30
  AGMAILSMTP =  173.194.71.108,173.194.71.109

  # ns.axnet.nu, google-old: 130.211.122.182 (gcp) ; kamatera-new: 185.167.97.187 (cloudwm.com)
  ANSAX =       185.167.97.187,130.211.122.182

  # Services
  icmp_allow =  icmp ; source-quench, redirect, echo-request, time-exceeded, parameter-problem, destination-unreachable
  squid =	3128
  p_squid =	tcp ; 3128
  p_wg =	udp ; 55855
  # Minecraft Java Edition uses TCP/25565 (while Minecraft Bedrock Edition uses UDP/19132)
  p_minecraft = tcp ; 25565 

# Give interfaces names firstly (so we don't have to consider order on behalf of that below)
[IDWL]
  NAME = dwlan

[IDMZMC]
  NAME = dmzmc

[IBB2]
  NAME = bb2
#[ICOMHEM]
#  NAME = comhem
[cph0]
  NAME = ucph
#[sou0]
#  NAME = usou
[IVPNAX]
  NAME = vpnax
[IVPNNS]
  NAME = vpnns
[IINT]
  NAME = int
[IWIF]
  NAME = wifi
[IVR]
  NAME = vms


[ALL]
  ACCEPT =	ALL		; ALL		; ALL		; icmp_allow			# useful harmless icmp
  ACCEPT =	_FW_		; ALL		; ALL		; icmp_allow			# -"-
  ACCEPT =	_FW_		; ALL		; ALL		; tcp,udp	; domain	# allow self dns
  ACCEPT =	_FW_		; ALL		; ALL		; udp		; ntp		# allow self ntp
  ACCEPT =	_FW_		; ALL		; ALL		; p_wg				# allow self wireguard
  ACCEPT =	IDMZMC		; ALL		; ALL		; p_minecraft			# minecraft
  REJECT =	IDMZs		; ALL		; NPRIV		; ALL		; ALL		# Don't allow DMZs access to internal (private addresses)

[IDMZMC]
  ACCEPT =	ALL		; ALL		; ALL		; tcp,udp	; 25565		# minecraft
  ACCEPT =	ILOCs		; NLOCs		; ALL		; tcp		; ssh		# int ssh
  ACCEPT =	IVPNAXNS	; NVPNAXNS	; ALL		; tcp		; ssh		# int ssh
  ACCEPT =	_FW_		; ALL		; ALL		; tcp		; ssh		# int ssh
  iptables = --table nat --insert PREROUTING --destination 31.208.204.45 --protocol udp --destination-port 25565 --jump DNAT --to-destination 10.46.255.254:25565 # minecraft
  iptables = --table nat --insert PREROUTING --destination 31.208.204.45 --protocol tcp --destination-port 25565 --jump DNAT --to-destination 10.46.255.254:25565 # minecraft

[IBB2]	
  ACCEPT =	IDMZMC,IDWL	; ALL		; ALL		; ALL		; ALL		 # minecraft + D-link, internet via bb2


# special to manage comhem router on 192.168.100.1 admin - timop123
#[ICOMHEM]
#  ACCEPT =	_FW_		; 192.168.100.2	; 192.168.100.1 ; ALL           ; ALL
#  ACCEPT =	ILOCs		; NLOCs		; 192.168.100.1 ; ALL           ; ALL
#  NAT	 =	192.168.100.2   ; NLOCs		; 192.168.100.1 ; ALL           ; ALL  ; insert

[IEXTs]
  REJECT =	_FW_		; NLOOP,NPRIV	; ALL		; ALL		; ALL		 # reject priv2ext

[ILOCs]
  ACCEPT = 	_FW_		; ALL		; 10.46.254.101 ; tcp		; 80		 # cam
  # Full Access
  ACCEPT =	ILOCs		; NLOCs		; ALL		; ALL		; ALL		 # internal
  ACCEPT =	IVPNAXNS	; NVPNAXNS	; ALL		; ALL		; ALL		 # own vpn

[IVPN]
  ACCEPT =	ILOCs		; NLOCs		; ALL		; ALL		; ALL		 # int2vpn
  ACCEPT =	IVPNAXNS	; NVPNAXNS	; ALL		; ALL		; ALL		 # ownvpns2vpn
  ACCEPT =	_FW_		; ALL		; ALL		; ALL		; ALL		 # fw2vpn

[IVPNUC]
# NAT =		<snat-addr>     ; <source-addr> ; <dest-addr>   ; <protocol>    ; <dest-port> [ ; insert ]
  NAT =		AVPNUC		; ALL		; ALL		; ALL		; ALL		 # NAT all traffic to Unity
  iptables = --table nat --insert ALL-ucph  --source 169.254.9.238 --destination 169.254.9.237 --jump ACCEPT 

#[IVPNUS]
## NAT =		<snat-addr>     ; <source-addr> ; <dest-addr>   ; <protocol>    ; <dest-port> [ ; insert ]
#  NAT =		10.46.254.2	; ALL		; ALL		; ALL		; ALL		 # NAT all traffic to Unity
#  iptables = --table nat --insert ALL-usou --source 169.254.9.209 --destination 169.254.9.210 --jump ACCEPT 

[IEXTs]
  ACCEPT =	_FW_		; ALL		; ALL		; udp		; bootps	 # self dhcp
  ACCEPT =	ILOCs		; NLOCs		; ALL		; ALL		; ALL		 # int
  ACCEPT =	IVPNAXNS	; NVPNAXNS	; ALL		; ALL		; ALL		 # own vpn
  # NAT Unity-bound IPSec Traffic
  #NAT   =	10.46.254.2	; NPRIV		; NPRIV		; ALL		; ALL		 # NAT IPSec traffic to Unity
  NAT =		ALL		; NPRIV		; ALL		; ALL		; ALL		 # NAT all priv addr to Inet
  # For now log and accept traffic from self
  #iptables = --table filter --append FW-bb2 --jump LOG --log-tcp-options --log-ip-options --log-prefix "ACCEPT:" --log-level debug
  ACCEPT =	_FW_		; ALL		; ALL		; ALL		; ALL		 # self2ext

[lo]
  ACCEPT =	_FW_		; ALL		; ALL		; ALL		; ALL 		# loopback

[_FW_]
  ACCEPT =	lo		; ALL		  ; ALL		; ALL		; ALL 		# loopback
  ACCEPT =	IEXTs		; AUNITYE 	  ; ALL		; udp		; 500,4500	# IPSec IKE from Unity
  ACCEPT =	IEXTs		; AUNITYE 	  ; ALL		; 50		; ALL		# IPSec ESP from Unity
  ACCEPT =	IEXTs		; AUNITYE	  ; ALL		; tcp		; ssh		# ssh from Unity
  ACCEPT =	IEXTs		; AUNITYE	  ; ALL		; icmp_allow		        # useful icmp from Unity
  ACCEPT =	IVPNU		; AUNITYT 	  ; ALL		; icmp		; ALL		# icmp from Unity TUN GW
  ACCEPT =	IVPNU		; AUNITYT,AFRAXU  ; ALL		; tcp		; ssh		# ssh from Unity TUN GW
  ACCEPT =	IVPNU		; 10.160.51.2	  ; AVPNUC	; tcp,udp	; domain	# unity dns master
  #iptables = --table filter --append comhem-FW --destination 192.168.100.3 --jump DROP
  DROP   =	IEXTs		; NLOOP,NPRIV     ; ALL		; ALL		; ALL		# drop priv from ext (obs priv over IPSec)
  # Allow External DHCP servers to initiate contact.
  iptables = --table filter --insert bb2-FW --protocol udp --source-port bootps --destination-port bootpc --jump ACCEPT
  #iptables = --table filter --insert comhem-FW --protocol udp --source-port bootps --destination-port bootpc --jump ACCEPT
  ACCEPT =	IEXTs		; ANSAX 	  ; ALL		; icmp		; ALL		# icmp from ns.axnet.nu 
  ACCEPT =	IEXTs		; ANSAX 	  ; ALL		; tcp		; 22,5001,5201	# ssh & iperf from ns.axnet.nu 
  ACCEPT =	IEXTs		; ANSAX 	  ; ALL		; tcp,udp	; domain	# dns (notifies) from ns.axnet.nu 
  ACCEPT =	IEXTs		; 93.95.224.6 	  ; ALL		; tcp,udp	; domain	# dns (notifies) from axfr.1984.is
  #ACCEPT =	ALL		; ALL  		  ; ALL		; tcp		; 6996		# sk8cry
  #ACCEPT =	ALL		; ALL  		  ; ALL		; tcp		; 80		# sk8cry
  ACCEPT =	ILOCs		; NLOCs		  ; ALL		; tcp		; ssh		# int ssh
  ACCEPT =	IVPNAXNS	; NVPNAXNS	  ; ALL		; tcp		; ssh		# own vpn ssh 
  ACCEPT =	IVPNAXNS	; NVPNAXNS	  ; ALL		; tcp,udp	; domain	# own vpn dns
  ACCEPT =	IVPNAXNS	; NVPNAXNS	  ; ALL		; udp		; ntp		# own vpn ntp
  ACCEPT =	ILOCs		; NLOCs		  ; ALL		; icmp		; ALL		# int icmp
  ACCEPT =	IVPNAXNS	; NPRIV		  ; ALL		; icmp		; ALL		# own vpn icmp
  ACCEPT =	ALL		; AFRAXU	  ; ALL		; icmp		; ALL		# own laptop on unity icmp
  ACCEPT =	ALL		; AFRAXU	  ; ALL		; tcp,udp	; domain	# own laptop on unity dns
  ACCEPT =	ILOCs		; ALL		  ; ALL		; tcp,udp	; domain,5201	# locals dns and iperf3
  ACCEPT =	ILOCs		; ALL		  ; ALL		; udp		; bootps,ntp	# locals dhcp+ntp
  ACCEPT =	IDMZs		; NDMZs		  ; ALL		; tcp,udp	; domain	# dmzs dns
  ACCEPT =	ALL		; ALL		  ; ALL		; p_wg				# WireGuard VPN
  #ACCEPT =	ALL		; ALL		  ; ALL		; p_minecraft			# Minecraft (not needed as it's DNAT:ed before hitting this rule)

  # Silently drop other multi- and broadcasts
  iptables = --table filter --append INPUT --destination 224.0.0.0/4 --jump DROP
  iptables = --table filter --append INPUT --destination 10.46.254.127 --jump DROP
  iptables = --table filter --append INPUT --destination 10.46.254.255 --jump DROP
  iptables = --table filter --append INPUT --destination 255.255.255.255 --jump DROP
  iptables = --table filter --append INPUT --destination 46.162.103.255 --jump DROP

  # REJECT (instead of DROP) packages from internal networks (silently drop multi- and broadcasts before)
  iptables = --table filter --append int-FW --destination 224.0.0.0/4 --jump DROP	
  iptables = --table filter --append int-FW --destination 10.46.254.255 --jump DROP	
  iptables = --table filter --append int-FW --destination 10.46.254.127 --jump DROP	
  iptables = --table filter --append int-FW --destination 255.255.255.255 --jump DROP	
  iptables = --table filter --append int-FW --in-interface vlan16 ! --source 10.46.254.0/25 --jump LOG_REJECT
  iptables = --table filter --append int-FW --in-interface vlan116 ! --source 10.46.254.128/25 --jump LOG_REJECT
  iptables = --table filter --append INPUT --in-interface bond0.116 ! --source 10.46.254.128/25 --jump LOG_REJECT
  iptables = --table filter --append INPUT --in-interface eth16 ! --source 10.46.254.128/25 --jump LOG_REJECT
  REJECT =	ILOCs		; ALL		; ALL		; ALL		; ALL
  REJECT =	IVPNAXNS	; ALL		; ALL		; ALL		; ALL


[IWIF]
# NAT =	<snat-addr>    ; <source-addr> ; <dest-addr>                               ; <protocol> ; <dest-port> [ ; insert ]
  # Nat towards APs to be able to manage them
  NAT = 10.46.254.129  ; NINT	       ; 10.46.254.225,10.46.254.226,10.46.254.227 ; ALL        ; ALL           ; insert

[ILOCs]
  # my devices @ unity 
  ACCEPT =	ALL		; AFRAXU	; ALL		; ALL		; ALL

  # get to fraxhue01 from Unity by portforwarding
  #ACCEPT =	IVPNU		; AFRAXU	; 10.46.254.12	; tcp		; http
  #iptables = --table nat --insert PREROUTING --in-interface tun0 --destination 10.9.1.53 --protocol tcp --destination-port 80 --jump DNAT --to-destination 10.46.254.12:80
  #iptables = --table nat --insert POSTROUTING --out-interface eth0 --protocol tcp --source 10.45.0.0/16 --destination 10.46.254.12 --destination-port 80  --jump SNAT --to-source 10.46.254.2

#  iptables = --table filter --append FORWARD --in-interface vlan16 ! --source 10.46.254.0/25 --jump LOG_REJECT
#  iptables = --table filter --append FORWARD --in-interface vlan116 ! --source 10.46.254.128/25 --jump LOG_REJECT
#  iptables = --table filter --append FORWARD --in-interface bond0.116 ! --source 10.46.254.128/25 --jump LOG_REJECT
#  iptables = --table filter --append FORWARD --in-interface eth16 ! --source 10.46.254.128/25 --jump LOG_REJECT

